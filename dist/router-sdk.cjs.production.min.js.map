{"version":3,"file":"router-sdk.cjs.production.min.js","sources":["../src/approveAndCall.ts","../src/constants.ts","../src/multicallExtended.ts","../src/paymentsExtended.ts","../src/entities/protocol.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/swapRouter.ts","../src/utils/index.ts"],"sourcesContent":["import { Interface } from '@ethersproject/abi'\nimport invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/IApproveAndCall.sol/IApproveAndCall.json'\nimport { Currency, Percent, Token } from '@uniswap/sdk-core'\nimport {\n  MintSpecificOptions,\n  IncreaseSpecificOptions,\n  NonfungiblePositionManager,\n  Position,\n  toHex,\n} from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\n// condensed version of v3-sdk AddLiquidityOptions containing only necessary swap + add attributes\nexport type CondensedAddLiquidityOptions = Omit<MintSpecificOptions, 'createPool'> | IncreaseSpecificOptions\n\nexport enum ApprovalTypes {\n  NOT_REQUIRED = 0,\n  MAX = 1,\n  MAX_MINUS_ONE = 2,\n  ZERO_THEN_MAX = 3,\n  ZERO_THEN_MAX_MINUS_ONE = 4,\n}\n\n// type guard\nexport function isMint(options: CondensedAddLiquidityOptions): options is Omit<MintSpecificOptions, 'createPool'> {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class ApproveAndCall {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeApproveMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveMax', [token.address])\n  }\n\n  public static encodeApproveMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveMaxMinusOne', [token.address])\n  }\n\n  public static encodeApproveZeroThenMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveZeroThenMax', [token.address])\n  }\n\n  public static encodeApproveZeroThenMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveZeroThenMaxMinusOne', [token.address])\n  }\n\n  public static encodeCallPositionManager(calldatas: string[]): string {\n    invariant(calldatas.length > 0, 'NULL_CALLDATA')\n\n    if (calldatas.length == 1) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('callPositionManager', calldatas)\n    } else {\n      const encodedMulticall = NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas])\n      return ApproveAndCall.INTERFACE.encodeFunctionData('callPositionManager', [encodedMulticall])\n    }\n  }\n  /**\n   * Encode adding liquidity to a position in the nft manager contract\n   * @param position Forcasted position with expected amount out from swap\n   * @param minimalPosition Forcasted position with custom minimal token amounts\n   * @param addLiquidityOptions Options for adding liquidity\n   * @param slippageTolerance Defines maximum slippage\n   */\n  public static encodeAddLiquidity(\n    position: Position,\n    minimalPosition: Position,\n    addLiquidityOptions: CondensedAddLiquidityOptions,\n    slippageTolerance: Percent\n  ): string {\n    let { amount0: amount0Min, amount1: amount1Min } = position.mintAmountsWithSlippage(slippageTolerance)\n\n    // position.mintAmountsWithSlippage() can create amounts not dependenable in scenarios\n    // such as range orders. Allow the option to provide a position with custom minimum amounts\n    // for these scenarios\n    if (JSBI.lessThan(minimalPosition.amount0.quotient, amount0Min)) {\n      amount0Min = minimalPosition.amount0.quotient\n    }\n    if (JSBI.lessThan(minimalPosition.amount1.quotient, amount1Min)) {\n      amount1Min = minimalPosition.amount1.quotient\n    }\n\n    if (isMint(addLiquidityOptions)) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('mint', [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          fee: position.pool.fee,\n          tickLower: position.tickLower,\n          tickUpper: position.tickUpper,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          recipient: addLiquidityOptions.recipient,\n        },\n      ])\n    } else {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('increaseLiquidity', [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          tokenId: toHex(addLiquidityOptions.tokenId),\n        },\n      ])\n    }\n  }\n\n  public static encodeApprove(token: Currency, approvalType: ApprovalTypes): string {\n    switch (approvalType) {\n      case ApprovalTypes.MAX:\n        return ApproveAndCall.encodeApproveMax(token.wrapped)\n      case ApprovalTypes.MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveMaxMinusOne(token.wrapped)\n      case ApprovalTypes.ZERO_THEN_MAX:\n        return ApproveAndCall.encodeApproveZeroThenMax(token.wrapped)\n      case ApprovalTypes.ZERO_THEN_MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveZeroThenMaxMinusOne(token.wrapped)\n      default:\n        throw 'Error: invalid ApprovalType'\n    }\n  }\n}\n","import JSBI from 'jsbi'\n\nexport const MSG_SENDER = '0x0000000000000000000000000000000000000001'\nexport const ADDRESS_THIS = '0x0000000000000000000000000000000000000002'\n\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// = 1 << 23 or 100000000000000000000000\nexport const V2_FEE_PATH_PLACEHOLDER = 8388608\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh } from '@uniswap/sdk-core'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/IMulticallExtended.sol/IMulticallExtended.json'\nimport { Multicall, toHex } from '@uniswap/v3-sdk'\n\n// deadline or previousBlockhash\nexport type Validation = BigintIsh | string\n\nfunction validateAndParseBytes32(bytes32: string): string {\n  if (!bytes32.match(/^0x[0-9a-fA-F]{64}$/)) {\n    throw new Error(`${bytes32} is not valid bytes32.`)\n  }\n\n  return bytes32.toLowerCase()\n}\n\nexport abstract class MulticallExtended {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[], validation?: Validation): string {\n    // if there's no validation, we can just fall back to regular multicall\n    if (typeof validation === 'undefined') {\n      return Multicall.encodeMulticall(calldatas)\n    }\n\n    // if there is validation, we have to normalize calldatas\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    // this means the validation value should be a previousBlockhash\n    if (typeof validation === 'string' && validation.startsWith('0x')) {\n      const previousBlockhash = validateAndParseBytes32(validation)\n      return MulticallExtended.INTERFACE.encodeFunctionData('multicall(bytes32,bytes[])', [\n        previousBlockhash,\n        calldatas,\n      ])\n    } else {\n      const deadline = toHex(validation)\n      return MulticallExtended.INTERFACE.encodeFunctionData('multicall(uint256,bytes[])', [deadline, calldatas])\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { Percent, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/IPeripheryPaymentsWithFeeExtended.sol/IPeripheryPaymentsWithFeeExtended.json'\nimport { FeeOptions, Payments, toHex } from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nfunction encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n\nexport abstract class PaymentsExtended {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient?: string, feeOptions?: FeeOptions): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === 'string') {\n      return Payments.encodeUnwrapWETH9(amountMinimum, recipient, feeOptions)\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee)\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData('unwrapWETH9WithFee(uint256,uint256,address)', [\n        toHex(amountMinimum),\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData('unwrapWETH9(uint256)', [toHex(amountMinimum)])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient?: string,\n    feeOptions?: FeeOptions\n  ): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === 'string') {\n      return Payments.encodeSweepToken(token, amountMinimum, recipient, feeOptions)\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee)\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData('sweepTokenWithFee(address,uint256,uint256,address)', [\n        token.address,\n        toHex(amountMinimum),\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData('sweepToken(address,uint256)', [\n        token.address,\n        toHex(amountMinimum),\n      ])\n    }\n  }\n\n  public static encodePull(token: Token, amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData('pull', [token.address, toHex(amount)])\n  }\n\n  public static encodeWrapETH(amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData('wrapETH', [toHex(amount)])\n  }\n}\n","export enum Protocol {\n  V2 = 'V2',\n  V3 = 'V3',\n  MIXED = 'MIXED',\n}\n","// entities/route.ts\n\nimport { Route as V3RouteSDK, Pool } from '@uniswap/v3-sdk'\nimport { Protocol } from './protocol'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nexport interface IRoute<TInput extends Currency, TOutput extends Currency, TPool extends Pool> {\n  protocol: Protocol\n  // array of pools if v3 or pairs if v2\n  pools: TPool[]\n  path: Token[]\n  midPrice: Price<TInput, TOutput>\n  input: TInput\n  output: TOutput\n}\n// V3 route wrapper\nexport class RouteV3<TInput extends Currency, TOutput extends Currency>\n  extends V3RouteSDK<TInput, TOutput>\n  implements IRoute<TInput, TOutput, Pool>\n{\n  public readonly protocol: Protocol = Protocol.V3\n  public readonly path: Token[]\n\n  constructor(v3Route: V3RouteSDK<TInput, TOutput>) {\n    super(v3Route.pools, v3Route.input, v3Route.output)\n    this.path = v3Route.tokenPath\n  }\n}\n","import { Currency, CurrencyAmount, Fraction, Percent, Price, TradeType } from '@uniswap/sdk-core'\nimport { Pool, Route as V3RouteSDK, Trade as V3TradeSDK } from '@uniswap/v3-sdk'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../constants'\nimport { IRoute, RouteV3 } from './route'\n\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  public readonly routes: IRoute<TInput, TOutput, Pool>[]\n  public readonly tradeType: TTradeType\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade. May consist of swaps in v2 or v3.\n   */\n  public readonly swaps: {\n    route: IRoute<TInput, TOutput, Pool>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  //  construct a trade across v2 and v3 routes from pre-computed amounts\n  public constructor({\n    v3Routes,\n    tradeType,\n  }: {\n    v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    this.swaps = []\n    this.routes = []\n    // wrap v3 routes\n    for (const { routev3, inputAmount, outputAmount } of v3Routes) {\n      const route = new RouteV3(routev3)\n      this.routes.push(route)\n      this.swaps.push({\n        route,\n        inputAmount,\n        outputAmount,\n      })\n    }\n    this.tradeType = tradeType\n\n    // each route must have the same input and output currency\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    invariant(\n      this.swaps.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      this.swaps.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    // pools must be unique inter protocols\n    const numPools = this.swaps.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of this.swaps) {\n      for (const pool of route.pools) {\n        if (pool instanceof Pool) {\n          poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, (pool as Pool).fee))\n        } else {\n          throw new Error('Unexpected pool type in route when constructing trade object')\n        }\n      }\n    }\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n  }\n\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n    }[],\n    tradeType: TTradeType,\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n\n    const populatedV3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { routev3, amount } of v3Routes) {\n      const v3Trade = await V3TradeSDK.fromRoute(routev3, amount, tradeType)\n      const { inputAmount, outputAmount } = v3Trade\n\n      populatedV3Routes.push({\n        routev3,\n        inputAmount,\n        outputAmount,\n      })\n    }\n\n    return new Trade({\n      v3Routes: populatedV3Routes,\n      tradeType,\n    })\n  }\n\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: V3RouteSDK<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n\n    let v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    if (route instanceof V3RouteSDK) {\n      const v3Trade = await V3TradeSDK.fromRoute(route, amount, tradeType)\n      const { inputAmount, outputAmount } = v3Trade\n      v3Routes = [{ routev3: route, inputAmount, outputAmount }]\n    } else {\n      throw new Error('Invalid route type')\n    }\n\n    return new Trade({\n      v3Routes,\n      tradeType,\n    })\n  }\n}\n","import { Interface } from '@ethersproject/abi'\r\nimport { Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress, WETH9 } from '@uniswap/sdk-core'\r\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/ISwapRouter02.sol/ISwapRouter02.json'\r\nimport {\r\n  encodeRouteToPath,\r\n  FeeOptions,\r\n  MethodParameters,\r\n  Payments,\r\n  PermitOptions,\r\n  Position,\r\n  SelfPermit,\r\n  toHex,\r\n  Trade as V3Trade,\r\n} from '@uniswap/v3-sdk'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { ADDRESS_THIS, MSG_SENDER } from './constants'\r\nimport { ApproveAndCall, ApprovalTypes, CondensedAddLiquidityOptions } from './approveAndCall'\r\nimport { Trade } from './entities/trade'\r\nimport { Protocol } from './entities/protocol'\r\nimport { RouteV3 } from './entities/route'\r\nimport { MulticallExtended, Validation } from './multicallExtended'\r\nimport { PaymentsExtended } from './paymentsExtended'\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\r\n\r\n/**\r\n * Options for producing the arguments to send calls to the router.\r\n */\r\nexport interface SwapOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  slippageTolerance: Percent\r\n\r\n  /**\r\n   * The account that should receive the output. If omitted, output is sent to msg.sender.\r\n   */\r\n  recipient?: string\r\n\r\n  /**\r\n   * Either deadline (when the transaction expires, in epoch seconds), or previousBlockhash.\r\n   */\r\n  deadlineOrPreviousBlockhash?: Validation\r\n\r\n  /**\r\n   * The optional permit parameters for spending the input.\r\n   */\r\n  inputTokenPermit?: PermitOptions\r\n\r\n  /**\r\n   * Optional information for taking a fee on output.\r\n   */\r\n  fee?: FeeOptions\r\n}\r\n\r\nexport interface SwapAndAddOptions extends SwapOptions {\r\n  /**\r\n   * The optional permit parameters for pulling in remaining output token.\r\n   */\r\n  outputTokenPermit?: PermitOptions\r\n}\r\n\r\ntype AnyTradeType =\r\n  | Trade<Currency, Currency, TradeType>\r\n  | V3Trade<Currency, Currency, TradeType>\r\n  | (V3Trade<Currency, Currency, TradeType>)[]\r\n\r\n/**\r\n * Represents the Uniswap V2 + V3 SwapRouter02, and has static methods for helping execute trades.\r\n */\r\nexport abstract class SwapRouter {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * @notice Generates the calldata for a Swap with a V3 Route.\r\n   * @param trade The V3Trade to encode.\r\n   * @param options SwapOptions to use for the trade.\r\n   * @param routerMustCustody Flag for whether funds should be sent to the router\r\n   * @param performAggregatedSlippageCheck Flag for whether we want to perform an aggregated slippage check\r\n   * @returns A string array of calldatas for the trade.\r\n   */\r\n  private static encodeV3Swap(\r\n    trade: V3Trade<Currency, Currency, TradeType>,\r\n    options: SwapOptions,\r\n    routerMustCustody: boolean,\r\n    performAggregatedSlippageCheck: boolean\r\n  ): string[] {\r\n    const calldatas: string[] = []\r\n\r\n    for (const { route, inputAmount, outputAmount } of trade.swaps) {\r\n      const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\r\n      const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\r\n\r\n      // flag for whether the trade is single hop or not\r\n      const singleHop = route.pools.length === 1\r\n\r\n      const recipient = routerMustCustody\r\n        ? ADDRESS_THIS\r\n        : typeof options.recipient === 'undefined'\r\n        ? MSG_SENDER\r\n        : validateAndParseAddress(options.recipient)\r\n\r\n      if (singleHop) {\r\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n          const exactInputSingleParams = {\r\n            tokenIn: route.tokenPath[0].address,\r\n            tokenOut: route.tokenPath[1].address,\r\n            fee: route.pools[0].fee,\r\n            recipient,\r\n            amountIn,\r\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\r\n            sqrtPriceLimitX96: 0,\r\n          }\r\n\r\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\r\n        } else {\r\n          const exactOutputSingleParams = {\r\n            tokenIn: route.tokenPath[0].address,\r\n            tokenOut: route.tokenPath[1].address,\r\n            fee: route.pools[0].fee,\r\n            recipient,\r\n            amountOut,\r\n            amountInMaximum: amountIn,\r\n            sqrtPriceLimitX96: 0,\r\n          }\r\n\r\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\r\n        }\r\n      } else {\r\n        const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\r\n\r\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n          const exactInputParams = {\r\n            path,\r\n            recipient,\r\n            amountIn,\r\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\r\n          }\r\n\r\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\r\n        } else {\r\n          const exactOutputParams = {\r\n            path,\r\n            recipient,\r\n            amountOut,\r\n            amountInMaximum: amountIn,\r\n          }\r\n\r\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\r\n        }\r\n      }\r\n    }\r\n\r\n    return calldatas\r\n  }\r\n\r\n  private static encodeSwaps(\r\n    trades: AnyTradeType,\r\n    options: SwapOptions,\r\n    isSwapAndAdd?: boolean\r\n  ): {\r\n    calldatas: string[]\r\n    sampleTrade: V3Trade<Currency, Currency, TradeType>\r\n    routerMustCustody: boolean\r\n    inputIsNative: boolean\r\n    outputIsNative: boolean\r\n    totalAmountIn: CurrencyAmount<Currency>\r\n    minimumAmountOut: CurrencyAmount<Currency>\r\n    quoteAmountOut: CurrencyAmount<Currency>\r\n  } {\r\n    // If dealing with an instance of the aggregated Trade object, unbundle it to individual trade objects.\r\n    if (trades instanceof Trade) {\r\n      invariant(\r\n        trades.swaps.every((swap) => swap.route.protocol == Protocol.V3),\r\n        'UNSUPPORTED_PROTOCOL'\r\n      )\r\n\r\n      let individualTrades: (V3Trade<Currency, Currency, TradeType>)[] = []\r\n\r\n      for (const { route, inputAmount, outputAmount } of trades.swaps) {\r\n        if (route.protocol == Protocol.V3) {\r\n          individualTrades.push(\r\n            V3Trade.createUncheckedTrade({\r\n              route: route as RouteV3<Currency, Currency>,\r\n              inputAmount,\r\n              outputAmount,\r\n              tradeType: trades.tradeType,\r\n            })\r\n          )\r\n        } else {\r\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\r\n        }\r\n      }\r\n      trades = individualTrades\r\n    }\r\n\r\n    if (!Array.isArray(trades)) {\r\n      trades = [trades]\r\n    }\r\n\r\n    const numberOfTrades = trades.reduce(\r\n      (numberOfTrades, trade) => numberOfTrades + (trade instanceof V3Trade ? trade.swaps.length : 1),\r\n      0\r\n    )\r\n\r\n    const sampleTrade = trades[0]\r\n\r\n    // All trades should have the same starting/ending currency and trade type\r\n    invariant(\r\n      trades.every((trade) => trade.inputAmount.currency.equals(sampleTrade.inputAmount.currency)),\r\n      'TOKEN_IN_DIFF'\r\n    )\r\n    invariant(\r\n      trades.every((trade) => trade.outputAmount.currency.equals(sampleTrade.outputAmount.currency)),\r\n      'TOKEN_OUT_DIFF'\r\n    )\r\n    invariant(\r\n      trades.every((trade) => trade.tradeType === sampleTrade.tradeType),\r\n      'TRADE_TYPE_DIFF'\r\n    )\r\n\r\n    const calldatas: string[] = []\r\n\r\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative\r\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative\r\n\r\n    // flag for whether we want to perform an aggregated slippage check\r\n    //   1. when there are >2 exact input trades. this is only a heuristic,\r\n    //      as it's still more gas-expensive even in this case, but has benefits\r\n    //      in that the reversion probability is lower\r\n    const performAggregatedSlippageCheck = sampleTrade.tradeType === TradeType.EXACT_INPUT && numberOfTrades > 2\r\n    // flag for whether funds should be send first to the router\r\n    //   1. when receiving ETH (which much be unwrapped from WETH)\r\n    //   2. when a fee on the output is being taken\r\n    //   3. when performing swap and add\r\n    //   4. when performing an aggregated slippage check\r\n    const routerMustCustody = outputIsNative || !!options.fee || !!isSwapAndAdd || performAggregatedSlippageCheck\r\n\r\n    // encode permit if necessary\r\n    if (options.inputTokenPermit) {\r\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\r\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\r\n    }\r\n\r\n    for (const trade of trades) {\r\n      if (trade instanceof V3Trade) {\r\n        for (const calldata of SwapRouter.encodeV3Swap(\r\n          trade,\r\n          options,\r\n          routerMustCustody,\r\n          performAggregatedSlippageCheck\r\n        )) {\r\n          calldatas.push(calldata)\r\n        }\r\n      } else {\r\n        throw new Error('Unsupported trade object')\r\n      }\r\n    }\r\n\r\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(sampleTrade.inputAmount.currency, 0)\r\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(sampleTrade.outputAmount.currency, 0)\r\n\r\n    const minimumAmountOut: CurrencyAmount<Currency> = trades.reduce(\r\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\r\n      ZERO_OUT\r\n    )\r\n\r\n    const quoteAmountOut: CurrencyAmount<Currency> = trades.reduce(\r\n      (sum, trade) => sum.add(trade.outputAmount),\r\n      ZERO_OUT\r\n    )\r\n\r\n    const totalAmountIn: CurrencyAmount<Currency> = trades.reduce(\r\n      (sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)),\r\n      ZERO_IN\r\n    )\r\n\r\n    return {\r\n      calldatas,\r\n      sampleTrade,\r\n      routerMustCustody,\r\n      inputIsNative,\r\n      outputIsNative,\r\n      totalAmountIn,\r\n      minimumAmountOut,\r\n      quoteAmountOut,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trades to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trades:\r\n      | Trade<Currency, Currency, TradeType>\r\n      | V3Trade<Currency, Currency, TradeType>\r\n      | (V3Trade<Currency, Currency, TradeType>)[],\r\n    options: SwapOptions\r\n  ): MethodParameters {\r\n    const {\r\n      calldatas,\r\n      sampleTrade,\r\n      routerMustCustody,\r\n      inputIsNative,\r\n      outputIsNative,\r\n      totalAmountIn,\r\n      minimumAmountOut,\r\n    } = SwapRouter.encodeSwaps(trades, options)\r\n\r\n    // unwrap or sweep\r\n    if (routerMustCustody) {\r\n      if (outputIsNative) {\r\n        calldatas.push(PaymentsExtended.encodeUnwrapWETH9(minimumAmountOut.quotient, options.recipient, options.fee))\r\n      } else {\r\n        calldatas.push(\r\n          PaymentsExtended.encodeSweepToken(\r\n            sampleTrade.outputAmount.currency.wrapped,\r\n            minimumAmountOut.quotient,\r\n            options.recipient,\r\n            options.fee\r\n          )\r\n        )\r\n      }\r\n    }\r\n\r\n    // must refund when paying in ETH: either with an uncertain input amount OR if there's a chance of a partial fill.\r\n    // unlike ERC20's, the full ETH value must be sent in the transaction, so the rest must be refunded.\r\n    if (inputIsNative && (sampleTrade.tradeType === TradeType.EXACT_OUTPUT || SwapRouter.riskOfPartialFill(trades))) {\r\n      calldatas.push(Payments.encodeRefundETH())\r\n    }\r\n\r\n    return {\r\n      calldata: MulticallExtended.encodeMulticall(calldatas, options.deadlineOrPreviousBlockhash),\r\n      value: toHex(inputIsNative ? totalAmountIn.quotient : ZERO),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trades to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapAndAddCallParameters(\r\n    trades: AnyTradeType,\r\n    options: SwapAndAddOptions,\r\n    position: Position,\r\n    addLiquidityOptions: CondensedAddLiquidityOptions,\r\n    tokenInApprovalType: ApprovalTypes,\r\n    tokenOutApprovalType: ApprovalTypes\r\n  ): MethodParameters {\r\n    const {\r\n      calldatas,\r\n      inputIsNative,\r\n      outputIsNative,\r\n      sampleTrade,\r\n      totalAmountIn: totalAmountSwapped,\r\n      quoteAmountOut,\r\n      minimumAmountOut,\r\n    } = SwapRouter.encodeSwaps(trades, options, true)\r\n\r\n    // encode output token permit if necessary\r\n    if (options.outputTokenPermit) {\r\n      invariant(quoteAmountOut.currency.isToken, 'NON_TOKEN_PERMIT_OUTPUT')\r\n      calldatas.push(SelfPermit.encodePermit(quoteAmountOut.currency, options.outputTokenPermit))\r\n    }\r\n\r\n    const chainId = sampleTrade.route.chainId\r\n    const zeroForOne = position.pool.token0.wrapped.address === totalAmountSwapped.currency.wrapped.address\r\n    const { positionAmountIn, positionAmountOut } = SwapRouter.getPositionAmounts(position, zeroForOne)\r\n\r\n    // if tokens are native they will be converted to WETH9\r\n    const tokenIn = inputIsNative ? WETH9[chainId] : positionAmountIn.currency.wrapped\r\n    const tokenOut = outputIsNative ? WETH9[chainId] : positionAmountOut.currency.wrapped\r\n\r\n    // if swap output does not make up whole outputTokenBalanceDesired, pull in remaining tokens for adding liquidity\r\n    const amountOutRemaining = positionAmountOut.subtract(quoteAmountOut.wrapped)\r\n    if (amountOutRemaining.greaterThan(CurrencyAmount.fromRawAmount(positionAmountOut.currency, 0))) {\r\n      // if output is native, this means the remaining portion is included as native value in the transaction\r\n      // and must be wrapped. Otherwise, pull in remaining ERC20 token.\r\n      outputIsNative\r\n        ? calldatas.push(PaymentsExtended.encodeWrapETH(amountOutRemaining.quotient))\r\n        : calldatas.push(PaymentsExtended.encodePull(tokenOut, amountOutRemaining.quotient))\r\n    }\r\n\r\n    // if input is native, convert to WETH9, else pull ERC20 token\r\n    inputIsNative\r\n      ? calldatas.push(PaymentsExtended.encodeWrapETH(positionAmountIn.quotient))\r\n      : calldatas.push(PaymentsExtended.encodePull(tokenIn, positionAmountIn.quotient))\r\n\r\n    // approve token balances to NFTManager\r\n    if (tokenInApprovalType !== ApprovalTypes.NOT_REQUIRED)\r\n      calldatas.push(ApproveAndCall.encodeApprove(tokenIn, tokenInApprovalType))\r\n    if (tokenOutApprovalType !== ApprovalTypes.NOT_REQUIRED)\r\n      calldatas.push(ApproveAndCall.encodeApprove(tokenOut, tokenOutApprovalType))\r\n\r\n    // represents a position with token amounts resulting from a swap with maximum slippage\r\n    // hence the minimal amount out possible.\r\n    const minimalPosition = Position.fromAmounts({\r\n      pool: position.pool,\r\n      tickLower: position.tickLower,\r\n      tickUpper: position.tickUpper,\r\n      amount0: zeroForOne ? position.amount0.quotient.toString() : minimumAmountOut.quotient.toString(),\r\n      amount1: zeroForOne ? minimumAmountOut.quotient.toString() : position.amount1.quotient.toString(),\r\n      useFullPrecision: false,\r\n    })\r\n\r\n    // encode NFTManager add liquidity\r\n    calldatas.push(\r\n      ApproveAndCall.encodeAddLiquidity(position, minimalPosition, addLiquidityOptions, options.slippageTolerance)\r\n    )\r\n\r\n    // sweep remaining tokens\r\n    inputIsNative\r\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\r\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenIn, ZERO))\r\n    outputIsNative\r\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\r\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenOut, ZERO))\r\n\r\n    let value: JSBI\r\n    if (inputIsNative) {\r\n      value = totalAmountSwapped.wrapped.add(positionAmountIn.wrapped).quotient\r\n    } else if (outputIsNative) {\r\n      value = amountOutRemaining.quotient\r\n    } else {\r\n      value = ZERO\r\n    }\r\n\r\n    return {\r\n      calldata: MulticallExtended.encodeMulticall(calldatas, options.deadlineOrPreviousBlockhash),\r\n      value: value.toString(),\r\n    }\r\n  }\r\n\r\n  // if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\r\n  private static riskOfPartialFill(trades: AnyTradeType): boolean {\r\n    if (Array.isArray(trades)) {\r\n      return trades.some((trade) => {\r\n        return SwapRouter.v3TradeWithHighPriceImpact(trade)\r\n      })\r\n    } else {\r\n      return SwapRouter.v3TradeWithHighPriceImpact(trades)\r\n    }\r\n  }\r\n\r\n  private static v3TradeWithHighPriceImpact(\r\n    trade: Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType>\r\n  ): boolean {\r\n    return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\r\n  }\r\n\r\n  private static getPositionAmounts(\r\n    position: Position,\r\n    zeroForOne: boolean\r\n  ): {\r\n    positionAmountIn: CurrencyAmount<Currency>\r\n    positionAmountOut: CurrencyAmount<Currency>\r\n  } {\r\n    const { amount0, amount1 } = position.mintAmounts\r\n    const currencyAmount0 = CurrencyAmount.fromRawAmount(position.pool.token0, amount0)\r\n    const currencyAmount1 = CurrencyAmount.fromRawAmount(position.pool.token1, amount1)\r\n\r\n    const [positionAmountIn, positionAmountOut] = zeroForOne\r\n      ? [currencyAmount0, currencyAmount1]\r\n      : [currencyAmount1, currencyAmount0]\r\n    return { positionAmountIn, positionAmountOut }\r\n  }\r\n}\r\n","import { Token } from '@uniswap/sdk-core'\r\nimport { Pool } from '@uniswap/v3-sdk'\r\n\r\n/**\r\n * Simple utility function to get the output of an array of Pools or Pairs\r\n * @param pools\r\n * @param firstInputToken\r\n * @returns the output token of the last pool in the array\r\n */\r\nexport const getOutputOfPools = (pools: Pool[], firstInputToken: Token): Token => {\r\n  const { inputToken: outputToken } = pools.reduce(\r\n    ({ inputToken }, pool: Pool): { inputToken: Token } => {\r\n      if (!pool.involvesToken(inputToken)) throw new Error('PATH')\r\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\r\n      return {\r\n        inputToken: outputToken,\r\n      }\r\n    },\r\n    { inputToken: firstInputToken }\r\n  )\r\n  return outputToken\r\n}\r\n"],"names":["ApprovalTypes","MSG_SENDER","ADDRESS_THIS","ZERO","JSBI","BigInt","ONE","isMint","options","Object","keys","some","k","ApproveAndCall","encodeApproveMax","token","INTERFACE","encodeFunctionData","address","encodeApproveMaxMinusOne","encodeApproveZeroThenMax","encodeApproveZeroThenMaxMinusOne","encodeCallPositionManager","calldatas","length","invariant","encodedMulticall","NonfungiblePositionManager","encodeAddLiquidity","position","minimalPosition","addLiquidityOptions","slippageTolerance","mintAmountsWithSlippage","amount0Min","amount0","amount1Min","amount1","lessThan","quotient","token0","pool","token1","fee","tickLower","tickUpper","toHex","recipient","tokenId","encodeApprove","approvalType","MAX","wrapped","MAX_MINUS_ONE","ZERO_THEN_MAX","ZERO_THEN_MAX_MINUS_ONE","Interface","abi","MulticallExtended","encodeMulticall","validation","Multicall","Array","isArray","startsWith","previousBlockhash","bytes32","match","Error","toLowerCase","validateAndParseBytes32","deadline","encodeFeeBips","multiply","Protocol","PaymentsExtended","encodeUnwrapWETH9","amountMinimum","feeOptions","Payments","feeBips","feeRecipient","validateAndParseAddress","encodeSweepToken","encodePull","amount","encodeWrapETH","RouteV3","v3Route","_this","pools","input","output","V3","path","tokenPath","V3RouteSDK","Trade","v3Routes","tradeType","this","swaps","routes","inputAmount","outputAmount","route","routev3","push","inputCurrency","currency","outputCurrency","every","equals","numPools","map","reduce","total","cur","poolAddressSet","Set","Pool","add","getAddress","size","_proto","minimumAmountOut","amountOut","TradeType","EXACT_OUTPUT","slippageAdjustedAmountOut","Fraction","invert","CurrencyAmount","fromRawAmount","maximumAmountIn","amountIn","EXACT_INPUT","slippageAdjustedAmountIn","worstExecutionPrice","Price","fromRoutes","populatedV3Routes","_iterator4","_context","_step4$value","V3TradeSDK","fromRoute","v3Trade","_context2","key","get","_inputAmount","totalInputFromRoutes","_outputAmount","totalOutputFromRoutes","_executionPrice","_priceImpact","spotOutputAmount","midPrice","quote","priceImpact","subtract","divide","Percent","numerator","denominator","REFUND_ETH_PRICE_IMPACT_THRESHOLD","SwapRouter","encodeV3Swap","trade","routerMustCustody","performAggregatedSlippageCheck","singleHop","tokenIn","tokenOut","amountOutMinimum","sqrtPriceLimitX96","amountInMaximum","encodeRouteToPath","encodeSwaps","trades","isSwapAndAdd","swap","protocol","individualTrades","V3Trade","createUncheckedTrade","numberOfTrades","sampleTrade","inputIsNative","isNative","outputIsNative","inputTokenPermit","isToken","SelfPermit","encodePermit","ZERO_IN","ZERO_OUT","sum","quoteAmountOut","totalAmountIn","swapCallParameters","riskOfPartialFill","encodeRefundETH","calldata","deadlineOrPreviousBlockhash","value","swapAndAddCallParameters","tokenInApprovalType","tokenOutApprovalType","totalAmountSwapped","outputTokenPermit","chainId","zeroForOne","getPositionAmounts","positionAmountIn","positionAmountOut","WETH9","amountOutRemaining","greaterThan","NOT_REQUIRED","Position","fromAmounts","toString","useFullPrecision","v3TradeWithHighPriceImpact","mintAmounts","currencyAmount0","currencyAmount1","firstInputToken","inputToken","involvesToken"],"mappings":"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"}