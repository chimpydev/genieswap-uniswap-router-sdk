{"version":3,"file":"router-sdk.cjs.development.js","sources":["../src/constants.ts","../src/approveAndCall.ts","../src/multicallExtended.ts","../src/paymentsExtended.ts","../src/entities/protocol.ts","../src/entities/route.ts","../src/entities/trade.ts","../src/swapRouter.ts","../src/utils/index.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\nexport const MSG_SENDER = '0x0000000000000000000000000000000000000001'\nexport const ADDRESS_THIS = '0x0000000000000000000000000000000000000002'\n\nexport const ZERO = JSBI.BigInt(0)\nexport const ONE = JSBI.BigInt(1)\n\n// = 1 << 23 or 100000000000000000000000\nexport const V2_FEE_PATH_PLACEHOLDER = 8388608\n","import { Interface } from '@ethersproject/abi'\nimport invariant from 'tiny-invariant'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/IApproveAndCall.sol/IApproveAndCall.json'\nimport { Currency, Percent, Token } from '@uniswap/sdk-core'\nimport {\n  MintSpecificOptions,\n  IncreaseSpecificOptions,\n  NonfungiblePositionManager,\n  Position,\n  toHex,\n} from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\n// condensed version of v3-sdk AddLiquidityOptions containing only necessary swap + add attributes\nexport type CondensedAddLiquidityOptions = Omit<MintSpecificOptions, 'createPool'> | IncreaseSpecificOptions\n\nexport enum ApprovalTypes {\n  NOT_REQUIRED = 0,\n  MAX = 1,\n  MAX_MINUS_ONE = 2,\n  ZERO_THEN_MAX = 3,\n  ZERO_THEN_MAX_MINUS_ONE = 4,\n}\n\n// type guard\nexport function isMint(options: CondensedAddLiquidityOptions): options is Omit<MintSpecificOptions, 'createPool'> {\n  return Object.keys(options).some((k) => k === 'recipient')\n}\n\nexport abstract class ApproveAndCall {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeApproveMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveMax', [token.address])\n  }\n\n  public static encodeApproveMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveMaxMinusOne', [token.address])\n  }\n\n  public static encodeApproveZeroThenMax(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveZeroThenMax', [token.address])\n  }\n\n  public static encodeApproveZeroThenMaxMinusOne(token: Token): string {\n    return ApproveAndCall.INTERFACE.encodeFunctionData('approveZeroThenMaxMinusOne', [token.address])\n  }\n\n  public static encodeCallPositionManager(calldatas: string[]): string {\n    invariant(calldatas.length > 0, 'NULL_CALLDATA')\n\n    if (calldatas.length == 1) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('callPositionManager', calldatas)\n    } else {\n      const encodedMulticall = NonfungiblePositionManager.INTERFACE.encodeFunctionData('multicall', [calldatas])\n      return ApproveAndCall.INTERFACE.encodeFunctionData('callPositionManager', [encodedMulticall])\n    }\n  }\n  /**\n   * Encode adding liquidity to a position in the nft manager contract\n   * @param position Forcasted position with expected amount out from swap\n   * @param minimalPosition Forcasted position with custom minimal token amounts\n   * @param addLiquidityOptions Options for adding liquidity\n   * @param slippageTolerance Defines maximum slippage\n   */\n  public static encodeAddLiquidity(\n    position: Position,\n    minimalPosition: Position,\n    addLiquidityOptions: CondensedAddLiquidityOptions,\n    slippageTolerance: Percent\n  ): string {\n    let { amount0: amount0Min, amount1: amount1Min } = position.mintAmountsWithSlippage(slippageTolerance)\n\n    // position.mintAmountsWithSlippage() can create amounts not dependenable in scenarios\n    // such as range orders. Allow the option to provide a position with custom minimum amounts\n    // for these scenarios\n    if (JSBI.lessThan(minimalPosition.amount0.quotient, amount0Min)) {\n      amount0Min = minimalPosition.amount0.quotient\n    }\n    if (JSBI.lessThan(minimalPosition.amount1.quotient, amount1Min)) {\n      amount1Min = minimalPosition.amount1.quotient\n    }\n\n    if (isMint(addLiquidityOptions)) {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('mint', [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          fee: position.pool.fee,\n          tickLower: position.tickLower,\n          tickUpper: position.tickUpper,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          recipient: addLiquidityOptions.recipient,\n        },\n      ])\n    } else {\n      return ApproveAndCall.INTERFACE.encodeFunctionData('increaseLiquidity', [\n        {\n          token0: position.pool.token0.address,\n          token1: position.pool.token1.address,\n          amount0Min: toHex(amount0Min),\n          amount1Min: toHex(amount1Min),\n          tokenId: toHex(addLiquidityOptions.tokenId),\n        },\n      ])\n    }\n  }\n\n  public static encodeApprove(token: Currency, approvalType: ApprovalTypes): string {\n    switch (approvalType) {\n      case ApprovalTypes.MAX:\n        return ApproveAndCall.encodeApproveMax(token.wrapped)\n      case ApprovalTypes.MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveMaxMinusOne(token.wrapped)\n      case ApprovalTypes.ZERO_THEN_MAX:\n        return ApproveAndCall.encodeApproveZeroThenMax(token.wrapped)\n      case ApprovalTypes.ZERO_THEN_MAX_MINUS_ONE:\n        return ApproveAndCall.encodeApproveZeroThenMaxMinusOne(token.wrapped)\n      default:\n        throw 'Error: invalid ApprovalType'\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { BigintIsh } from '@uniswap/sdk-core'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/IMulticallExtended.sol/IMulticallExtended.json'\nimport { Multicall, toHex } from '@uniswap/v3-sdk'\n\n// deadline or previousBlockhash\nexport type Validation = BigintIsh | string\n\nfunction validateAndParseBytes32(bytes32: string): string {\n  if (!bytes32.match(/^0x[0-9a-fA-F]{64}$/)) {\n    throw new Error(`${bytes32} is not valid bytes32.`)\n  }\n\n  return bytes32.toLowerCase()\n}\n\nexport abstract class MulticallExtended {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeMulticall(calldatas: string | string[], validation?: Validation): string {\n    // if there's no validation, we can just fall back to regular multicall\n    if (typeof validation === 'undefined') {\n      return Multicall.encodeMulticall(calldatas)\n    }\n\n    // if there is validation, we have to normalize calldatas\n    if (!Array.isArray(calldatas)) {\n      calldatas = [calldatas]\n    }\n\n    // this means the validation value should be a previousBlockhash\n    if (typeof validation === 'string' && validation.startsWith('0x')) {\n      const previousBlockhash = validateAndParseBytes32(validation)\n      return MulticallExtended.INTERFACE.encodeFunctionData('multicall(bytes32,bytes[])', [\n        previousBlockhash,\n        calldatas,\n      ])\n    } else {\n      const deadline = toHex(validation)\n      return MulticallExtended.INTERFACE.encodeFunctionData('multicall(uint256,bytes[])', [deadline, calldatas])\n    }\n  }\n}\n","import { Interface } from '@ethersproject/abi'\nimport { Percent, Token, validateAndParseAddress } from '@uniswap/sdk-core'\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/IPeripheryPaymentsWithFeeExtended.sol/IPeripheryPaymentsWithFeeExtended.json'\nimport { FeeOptions, Payments, toHex } from '@uniswap/v3-sdk'\nimport JSBI from 'jsbi'\n\nfunction encodeFeeBips(fee: Percent): string {\n  return toHex(fee.multiply(10_000).quotient)\n}\n\nexport abstract class PaymentsExtended {\n  public static INTERFACE: Interface = new Interface(abi)\n\n  /**\n   * Cannot be constructed.\n   */\n  private constructor() {}\n\n  public static encodeUnwrapWETH9(amountMinimum: JSBI, recipient?: string, feeOptions?: FeeOptions): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === 'string') {\n      return Payments.encodeUnwrapWETH9(amountMinimum, recipient, feeOptions)\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee)\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData('unwrapWETH9WithFee(uint256,uint256,address)', [\n        toHex(amountMinimum),\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData('unwrapWETH9(uint256)', [toHex(amountMinimum)])\n    }\n  }\n\n  public static encodeSweepToken(\n    token: Token,\n    amountMinimum: JSBI,\n    recipient?: string,\n    feeOptions?: FeeOptions\n  ): string {\n    // if there's a recipient, just pass it along\n    if (typeof recipient === 'string') {\n      return Payments.encodeSweepToken(token, amountMinimum, recipient, feeOptions)\n    }\n\n    if (!!feeOptions) {\n      const feeBips = encodeFeeBips(feeOptions.fee)\n      const feeRecipient = validateAndParseAddress(feeOptions.recipient)\n\n      return PaymentsExtended.INTERFACE.encodeFunctionData('sweepTokenWithFee(address,uint256,uint256,address)', [\n        token.address,\n        toHex(amountMinimum),\n        feeBips,\n        feeRecipient,\n      ])\n    } else {\n      return PaymentsExtended.INTERFACE.encodeFunctionData('sweepToken(address,uint256)', [\n        token.address,\n        toHex(amountMinimum),\n      ])\n    }\n  }\n\n  public static encodePull(token: Token, amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData('pull', [token.address, toHex(amount)])\n  }\n\n  public static encodeWrapETH(amount: JSBI): string {\n    return PaymentsExtended.INTERFACE.encodeFunctionData('wrapETH', [toHex(amount)])\n  }\n}\n","export enum Protocol {\n  V2 = 'V2',\n  V3 = 'V3',\n  MIXED = 'MIXED',\n}\n","// entities/route.ts\n\nimport { Route as V3RouteSDK, Pool } from '@uniswap/v3-sdk'\nimport { Protocol } from './protocol'\nimport { Currency, Price, Token } from '@uniswap/sdk-core'\n\nexport interface IRoute<TInput extends Currency, TOutput extends Currency, TPool extends Pool> {\n  protocol: Protocol\n  // array of pools if v3 or pairs if v2\n  pools: TPool[]\n  path: Token[]\n  midPrice: Price<TInput, TOutput>\n  input: TInput\n  output: TOutput\n}\n// V3 route wrapper\nexport class RouteV3<TInput extends Currency, TOutput extends Currency>\n  extends V3RouteSDK<TInput, TOutput>\n  implements IRoute<TInput, TOutput, Pool>\n{\n  public readonly protocol: Protocol = Protocol.V3\n  public readonly path: Token[]\n\n  constructor(v3Route: V3RouteSDK<TInput, TOutput>) {\n    super(v3Route.pools, v3Route.input, v3Route.output)\n    this.path = v3Route.tokenPath\n  }\n}\n","import { Currency, CurrencyAmount, Fraction, Percent, Price, TradeType } from '@uniswap/sdk-core'\nimport { Pool, Route as V3RouteSDK, Trade as V3TradeSDK } from '@uniswap/v3-sdk'\nimport invariant from 'tiny-invariant'\nimport { ONE, ZERO } from '../constants'\nimport { IRoute, RouteV3 } from './route'\n\nexport class Trade<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType> {\n  public readonly routes: IRoute<TInput, TOutput, Pool>[]\n  public readonly tradeType: TTradeType\n  private _outputAmount: CurrencyAmount<TOutput> | undefined\n  private _inputAmount: CurrencyAmount<TInput> | undefined\n\n  /**\n   * The swaps of the trade, i.e. which routes and how much is swapped in each that\n   * make up the trade. May consist of swaps in v2 or v3.\n   */\n  public readonly swaps: {\n    route: IRoute<TInput, TOutput, Pool>\n    inputAmount: CurrencyAmount<TInput>\n    outputAmount: CurrencyAmount<TOutput>\n  }[]\n\n  //  construct a trade across v2 and v3 routes from pre-computed amounts\n  public constructor({\n    v3Routes,\n    tradeType,\n  }: {\n    v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[]\n    tradeType: TTradeType\n  }) {\n    this.swaps = []\n    this.routes = []\n    // wrap v3 routes\n    for (const { routev3, inputAmount, outputAmount } of v3Routes) {\n      const route = new RouteV3(routev3)\n      this.routes.push(route)\n      this.swaps.push({\n        route,\n        inputAmount,\n        outputAmount,\n      })\n    }\n    this.tradeType = tradeType\n\n    // each route must have the same input and output currency\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    invariant(\n      this.swaps.every(({ route }) => inputCurrency.wrapped.equals(route.input.wrapped)),\n      'INPUT_CURRENCY_MATCH'\n    )\n    invariant(\n      this.swaps.every(({ route }) => outputCurrency.wrapped.equals(route.output.wrapped)),\n      'OUTPUT_CURRENCY_MATCH'\n    )\n\n    // pools must be unique inter protocols\n    const numPools = this.swaps.map(({ route }) => route.pools.length).reduce((total, cur) => total + cur, 0)\n    const poolAddressSet = new Set<string>()\n    for (const { route } of this.swaps) {\n      for (const pool of route.pools) {\n        if (pool instanceof Pool) {\n          poolAddressSet.add(Pool.getAddress(pool.token0, pool.token1, (pool as Pool).fee))\n        } else {\n          throw new Error('Unexpected pool type in route when constructing trade object')\n        }\n      }\n    }\n    invariant(numPools == poolAddressSet.size, 'POOLS_DUPLICATED')\n  }\n\n  public get inputAmount(): CurrencyAmount<TInput> {\n    if (this._inputAmount) {\n      return this._inputAmount\n    }\n\n    const inputCurrency = this.swaps[0].inputAmount.currency\n    const totalInputFromRoutes = this.swaps\n      .map(({ inputAmount }) => inputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(inputCurrency, 0))\n\n    this._inputAmount = totalInputFromRoutes\n    return this._inputAmount\n  }\n\n  public get outputAmount(): CurrencyAmount<TOutput> {\n    if (this._outputAmount) {\n      return this._outputAmount\n    }\n\n    const outputCurrency = this.swaps[0].outputAmount.currency\n    const totalOutputFromRoutes = this.swaps\n      .map(({ outputAmount }) => outputAmount)\n      .reduce((total, cur) => total.add(cur), CurrencyAmount.fromRawAmount(outputCurrency, 0))\n\n    this._outputAmount = totalOutputFromRoutes\n    return this._outputAmount\n  }\n\n  private _executionPrice: Price<TInput, TOutput> | undefined\n\n  /**\n   * The price expressed in terms of output amount/input amount.\n   */\n  public get executionPrice(): Price<TInput, TOutput> {\n    return (\n      this._executionPrice ??\n      (this._executionPrice = new Price(\n        this.inputAmount.currency,\n        this.outputAmount.currency,\n        this.inputAmount.quotient,\n        this.outputAmount.quotient\n      ))\n    )\n  }\n\n  /**\n   * The cached result of the price impact computation\n   * @private\n   */\n  private _priceImpact: Percent | undefined\n  /**\n   * Returns the percent difference between the route's mid price and the price impact\n   */\n  public get priceImpact(): Percent {\n    if (this._priceImpact) {\n      return this._priceImpact\n    }\n\n    let spotOutputAmount = CurrencyAmount.fromRawAmount(this.outputAmount.currency, 0)\n    for (const { route, inputAmount } of this.swaps) {\n      const midPrice = route.midPrice\n      spotOutputAmount = spotOutputAmount.add(midPrice.quote(inputAmount))\n    }\n\n    const priceImpact = spotOutputAmount.subtract(this.outputAmount).divide(spotOutputAmount)\n    this._priceImpact = new Percent(priceImpact.numerator, priceImpact.denominator)\n\n    return this._priceImpact\n  }\n\n  /**\n   * Get the minimum amount that must be received from this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount out\n   */\n  public minimumAmountOut(slippageTolerance: Percent, amountOut = this.outputAmount): CurrencyAmount<TOutput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_OUTPUT) {\n      return amountOut\n    } else {\n      const slippageAdjustedAmountOut = new Fraction(ONE)\n        .add(slippageTolerance)\n        .invert()\n        .multiply(amountOut.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountOut.currency, slippageAdjustedAmountOut)\n    }\n  }\n\n  /**\n   * Get the maximum amount in that can be spent via this trade for the given slippage tolerance\n   * @param slippageTolerance The tolerance of unfavorable slippage from the execution price of this trade\n   * @returns The amount in\n   */\n  public maximumAmountIn(slippageTolerance: Percent, amountIn = this.inputAmount): CurrencyAmount<TInput> {\n    invariant(!slippageTolerance.lessThan(ZERO), 'SLIPPAGE_TOLERANCE')\n    if (this.tradeType === TradeType.EXACT_INPUT) {\n      return amountIn\n    } else {\n      const slippageAdjustedAmountIn = new Fraction(ONE).add(slippageTolerance).multiply(amountIn.quotient).quotient\n      return CurrencyAmount.fromRawAmount(amountIn.currency, slippageAdjustedAmountIn)\n    }\n  }\n\n  /**\n   * Return the execution price after accounting for slippage tolerance\n   * @param slippageTolerance the allowed tolerated slippage\n   * @returns The execution price\n   */\n  public worstExecutionPrice(slippageTolerance: Percent): Price<TInput, TOutput> {\n    return new Price(\n      this.inputAmount.currency,\n      this.outputAmount.currency,\n      this.maximumAmountIn(slippageTolerance).quotient,\n      this.minimumAmountOut(slippageTolerance).quotient\n    )\n  }\n\n  public static async fromRoutes<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>\n    }[],\n    tradeType: TTradeType,\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n\n    const populatedV3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    for (const { routev3, amount } of v3Routes) {\n      const v3Trade = await V3TradeSDK.fromRoute(routev3, amount, tradeType)\n      const { inputAmount, outputAmount } = v3Trade\n\n      populatedV3Routes.push({\n        routev3,\n        inputAmount,\n        outputAmount,\n      })\n    }\n\n    return new Trade({\n      v3Routes: populatedV3Routes,\n      tradeType,\n    })\n  }\n\n  public static async fromRoute<TInput extends Currency, TOutput extends Currency, TTradeType extends TradeType>(\n    route: V3RouteSDK<TInput, TOutput>,\n    amount: TTradeType extends TradeType.EXACT_INPUT ? CurrencyAmount<TInput> : CurrencyAmount<TOutput>,\n    tradeType: TTradeType\n  ): Promise<Trade<TInput, TOutput, TTradeType>> {\n\n    let v3Routes: {\n      routev3: V3RouteSDK<TInput, TOutput>\n      inputAmount: CurrencyAmount<TInput>\n      outputAmount: CurrencyAmount<TOutput>\n    }[] = []\n\n    if (route instanceof V3RouteSDK) {\n      const v3Trade = await V3TradeSDK.fromRoute(route, amount, tradeType)\n      const { inputAmount, outputAmount } = v3Trade\n      v3Routes = [{ routev3: route, inputAmount, outputAmount }]\n    } else {\n      throw new Error('Invalid route type')\n    }\n\n    return new Trade({\n      v3Routes,\n      tradeType,\n    })\n  }\n}\n","import { Interface } from '@ethersproject/abi'\r\nimport { Currency, CurrencyAmount, Percent, TradeType, validateAndParseAddress, WETH9 } from '@uniswap/sdk-core'\r\nimport { abi } from '@uniswap/swap-router-contracts/artifacts/contracts/interfaces/ISwapRouter02.sol/ISwapRouter02.json'\r\nimport {\r\n  encodeRouteToPath,\r\n  FeeOptions,\r\n  MethodParameters,\r\n  Payments,\r\n  PermitOptions,\r\n  Position,\r\n  SelfPermit,\r\n  toHex,\r\n  Trade as V3Trade,\r\n} from '@uniswap/v3-sdk'\r\nimport invariant from 'tiny-invariant'\r\nimport JSBI from 'jsbi'\r\nimport { ADDRESS_THIS, MSG_SENDER } from './constants'\r\nimport { ApproveAndCall, ApprovalTypes, CondensedAddLiquidityOptions } from './approveAndCall'\r\nimport { Trade } from './entities/trade'\r\nimport { Protocol } from './entities/protocol'\r\nimport { RouteV3 } from './entities/route'\r\nimport { MulticallExtended, Validation } from './multicallExtended'\r\nimport { PaymentsExtended } from './paymentsExtended'\r\n\r\nconst ZERO = JSBI.BigInt(0)\r\nconst REFUND_ETH_PRICE_IMPACT_THRESHOLD = new Percent(JSBI.BigInt(50), JSBI.BigInt(100))\r\n\r\n/**\r\n * Options for producing the arguments to send calls to the router.\r\n */\r\nexport interface SwapOptions {\r\n  /**\r\n   * How much the execution price is allowed to move unfavorably from the trade execution price.\r\n   */\r\n  slippageTolerance: Percent\r\n\r\n  /**\r\n   * The account that should receive the output. If omitted, output is sent to msg.sender.\r\n   */\r\n  recipient?: string\r\n\r\n  /**\r\n   * Either deadline (when the transaction expires, in epoch seconds), or previousBlockhash.\r\n   */\r\n  deadlineOrPreviousBlockhash?: Validation\r\n\r\n  /**\r\n   * The optional permit parameters for spending the input.\r\n   */\r\n  inputTokenPermit?: PermitOptions\r\n\r\n  /**\r\n   * Optional information for taking a fee on output.\r\n   */\r\n  fee?: FeeOptions\r\n}\r\n\r\nexport interface SwapAndAddOptions extends SwapOptions {\r\n  /**\r\n   * The optional permit parameters for pulling in remaining output token.\r\n   */\r\n  outputTokenPermit?: PermitOptions\r\n}\r\n\r\ntype AnyTradeType =\r\n  | Trade<Currency, Currency, TradeType>\r\n  | V3Trade<Currency, Currency, TradeType>\r\n  | (V3Trade<Currency, Currency, TradeType>)[]\r\n\r\n/**\r\n * Represents the Uniswap V2 + V3 SwapRouter02, and has static methods for helping execute trades.\r\n */\r\nexport abstract class SwapRouter {\r\n  public static INTERFACE: Interface = new Interface(abi)\r\n\r\n  /**\r\n   * Cannot be constructed.\r\n   */\r\n  private constructor() {}\r\n\r\n  /**\r\n   * @notice Generates the calldata for a Swap with a V3 Route.\r\n   * @param trade The V3Trade to encode.\r\n   * @param options SwapOptions to use for the trade.\r\n   * @param routerMustCustody Flag for whether funds should be sent to the router\r\n   * @param performAggregatedSlippageCheck Flag for whether we want to perform an aggregated slippage check\r\n   * @returns A string array of calldatas for the trade.\r\n   */\r\n  private static encodeV3Swap(\r\n    trade: V3Trade<Currency, Currency, TradeType>,\r\n    options: SwapOptions,\r\n    routerMustCustody: boolean,\r\n    performAggregatedSlippageCheck: boolean\r\n  ): string[] {\r\n    const calldatas: string[] = []\r\n\r\n    for (const { route, inputAmount, outputAmount } of trade.swaps) {\r\n      const amountIn: string = toHex(trade.maximumAmountIn(options.slippageTolerance, inputAmount).quotient)\r\n      const amountOut: string = toHex(trade.minimumAmountOut(options.slippageTolerance, outputAmount).quotient)\r\n\r\n      // flag for whether the trade is single hop or not\r\n      const singleHop = route.pools.length === 1\r\n\r\n      const recipient = routerMustCustody\r\n        ? ADDRESS_THIS\r\n        : typeof options.recipient === 'undefined'\r\n        ? MSG_SENDER\r\n        : validateAndParseAddress(options.recipient)\r\n\r\n      if (singleHop) {\r\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n          const exactInputSingleParams = {\r\n            tokenIn: route.tokenPath[0].address,\r\n            tokenOut: route.tokenPath[1].address,\r\n            fee: route.pools[0].fee,\r\n            recipient,\r\n            amountIn,\r\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\r\n            sqrtPriceLimitX96: 0,\r\n          }\r\n\r\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInputSingle', [exactInputSingleParams]))\r\n        } else {\r\n          const exactOutputSingleParams = {\r\n            tokenIn: route.tokenPath[0].address,\r\n            tokenOut: route.tokenPath[1].address,\r\n            fee: route.pools[0].fee,\r\n            recipient,\r\n            amountOut,\r\n            amountInMaximum: amountIn,\r\n            sqrtPriceLimitX96: 0,\r\n          }\r\n\r\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutputSingle', [exactOutputSingleParams]))\r\n        }\r\n      } else {\r\n        const path: string = encodeRouteToPath(route, trade.tradeType === TradeType.EXACT_OUTPUT)\r\n\r\n        if (trade.tradeType === TradeType.EXACT_INPUT) {\r\n          const exactInputParams = {\r\n            path,\r\n            recipient,\r\n            amountIn,\r\n            amountOutMinimum: performAggregatedSlippageCheck ? 0 : amountOut,\r\n          }\r\n\r\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactInput', [exactInputParams]))\r\n        } else {\r\n          const exactOutputParams = {\r\n            path,\r\n            recipient,\r\n            amountOut,\r\n            amountInMaximum: amountIn,\r\n          }\r\n\r\n          calldatas.push(SwapRouter.INTERFACE.encodeFunctionData('exactOutput', [exactOutputParams]))\r\n        }\r\n      }\r\n    }\r\n\r\n    return calldatas\r\n  }\r\n\r\n  private static encodeSwaps(\r\n    trades: AnyTradeType,\r\n    options: SwapOptions,\r\n    isSwapAndAdd?: boolean\r\n  ): {\r\n    calldatas: string[]\r\n    sampleTrade: V3Trade<Currency, Currency, TradeType>\r\n    routerMustCustody: boolean\r\n    inputIsNative: boolean\r\n    outputIsNative: boolean\r\n    totalAmountIn: CurrencyAmount<Currency>\r\n    minimumAmountOut: CurrencyAmount<Currency>\r\n    quoteAmountOut: CurrencyAmount<Currency>\r\n  } {\r\n    // If dealing with an instance of the aggregated Trade object, unbundle it to individual trade objects.\r\n    if (trades instanceof Trade) {\r\n      invariant(\r\n        trades.swaps.every((swap) => swap.route.protocol == Protocol.V3),\r\n        'UNSUPPORTED_PROTOCOL'\r\n      )\r\n\r\n      let individualTrades: (V3Trade<Currency, Currency, TradeType>)[] = []\r\n\r\n      for (const { route, inputAmount, outputAmount } of trades.swaps) {\r\n        if (route.protocol == Protocol.V3) {\r\n          individualTrades.push(\r\n            V3Trade.createUncheckedTrade({\r\n              route: route as RouteV3<Currency, Currency>,\r\n              inputAmount,\r\n              outputAmount,\r\n              tradeType: trades.tradeType,\r\n            })\r\n          )\r\n        } else {\r\n          throw new Error('UNSUPPORTED_TRADE_PROTOCOL')\r\n        }\r\n      }\r\n      trades = individualTrades\r\n    }\r\n\r\n    if (!Array.isArray(trades)) {\r\n      trades = [trades]\r\n    }\r\n\r\n    const numberOfTrades = trades.reduce(\r\n      (numberOfTrades, trade) => numberOfTrades + (trade instanceof V3Trade ? trade.swaps.length : 1),\r\n      0\r\n    )\r\n\r\n    const sampleTrade = trades[0]\r\n\r\n    // All trades should have the same starting/ending currency and trade type\r\n    invariant(\r\n      trades.every((trade) => trade.inputAmount.currency.equals(sampleTrade.inputAmount.currency)),\r\n      'TOKEN_IN_DIFF'\r\n    )\r\n    invariant(\r\n      trades.every((trade) => trade.outputAmount.currency.equals(sampleTrade.outputAmount.currency)),\r\n      'TOKEN_OUT_DIFF'\r\n    )\r\n    invariant(\r\n      trades.every((trade) => trade.tradeType === sampleTrade.tradeType),\r\n      'TRADE_TYPE_DIFF'\r\n    )\r\n\r\n    const calldatas: string[] = []\r\n\r\n    const inputIsNative = sampleTrade.inputAmount.currency.isNative\r\n    const outputIsNative = sampleTrade.outputAmount.currency.isNative\r\n\r\n    // flag for whether we want to perform an aggregated slippage check\r\n    //   1. when there are >2 exact input trades. this is only a heuristic,\r\n    //      as it's still more gas-expensive even in this case, but has benefits\r\n    //      in that the reversion probability is lower\r\n    const performAggregatedSlippageCheck = sampleTrade.tradeType === TradeType.EXACT_INPUT && numberOfTrades > 2\r\n    // flag for whether funds should be send first to the router\r\n    //   1. when receiving ETH (which much be unwrapped from WETH)\r\n    //   2. when a fee on the output is being taken\r\n    //   3. when performing swap and add\r\n    //   4. when performing an aggregated slippage check\r\n    const routerMustCustody = outputIsNative || !!options.fee || !!isSwapAndAdd || performAggregatedSlippageCheck\r\n\r\n    // encode permit if necessary\r\n    if (options.inputTokenPermit) {\r\n      invariant(sampleTrade.inputAmount.currency.isToken, 'NON_TOKEN_PERMIT')\r\n      calldatas.push(SelfPermit.encodePermit(sampleTrade.inputAmount.currency, options.inputTokenPermit))\r\n    }\r\n\r\n    for (const trade of trades) {\r\n      if (trade instanceof V3Trade) {\r\n        for (const calldata of SwapRouter.encodeV3Swap(\r\n          trade,\r\n          options,\r\n          routerMustCustody,\r\n          performAggregatedSlippageCheck\r\n        )) {\r\n          calldatas.push(calldata)\r\n        }\r\n      } else {\r\n        throw new Error('Unsupported trade object')\r\n      }\r\n    }\r\n\r\n    const ZERO_IN: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(sampleTrade.inputAmount.currency, 0)\r\n    const ZERO_OUT: CurrencyAmount<Currency> = CurrencyAmount.fromRawAmount(sampleTrade.outputAmount.currency, 0)\r\n\r\n    const minimumAmountOut: CurrencyAmount<Currency> = trades.reduce(\r\n      (sum, trade) => sum.add(trade.minimumAmountOut(options.slippageTolerance)),\r\n      ZERO_OUT\r\n    )\r\n\r\n    const quoteAmountOut: CurrencyAmount<Currency> = trades.reduce(\r\n      (sum, trade) => sum.add(trade.outputAmount),\r\n      ZERO_OUT\r\n    )\r\n\r\n    const totalAmountIn: CurrencyAmount<Currency> = trades.reduce(\r\n      (sum, trade) => sum.add(trade.maximumAmountIn(options.slippageTolerance)),\r\n      ZERO_IN\r\n    )\r\n\r\n    return {\r\n      calldatas,\r\n      sampleTrade,\r\n      routerMustCustody,\r\n      inputIsNative,\r\n      outputIsNative,\r\n      totalAmountIn,\r\n      minimumAmountOut,\r\n      quoteAmountOut,\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trades to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapCallParameters(\r\n    trades:\r\n      | Trade<Currency, Currency, TradeType>\r\n      | V3Trade<Currency, Currency, TradeType>\r\n      | (V3Trade<Currency, Currency, TradeType>)[],\r\n    options: SwapOptions\r\n  ): MethodParameters {\r\n    const {\r\n      calldatas,\r\n      sampleTrade,\r\n      routerMustCustody,\r\n      inputIsNative,\r\n      outputIsNative,\r\n      totalAmountIn,\r\n      minimumAmountOut,\r\n    } = SwapRouter.encodeSwaps(trades, options)\r\n\r\n    // unwrap or sweep\r\n    if (routerMustCustody) {\r\n      if (outputIsNative) {\r\n        calldatas.push(PaymentsExtended.encodeUnwrapWETH9(minimumAmountOut.quotient, options.recipient, options.fee))\r\n      } else {\r\n        calldatas.push(\r\n          PaymentsExtended.encodeSweepToken(\r\n            sampleTrade.outputAmount.currency.wrapped,\r\n            minimumAmountOut.quotient,\r\n            options.recipient,\r\n            options.fee\r\n          )\r\n        )\r\n      }\r\n    }\r\n\r\n    // must refund when paying in ETH: either with an uncertain input amount OR if there's a chance of a partial fill.\r\n    // unlike ERC20's, the full ETH value must be sent in the transaction, so the rest must be refunded.\r\n    if (inputIsNative && (sampleTrade.tradeType === TradeType.EXACT_OUTPUT || SwapRouter.riskOfPartialFill(trades))) {\r\n      calldatas.push(Payments.encodeRefundETH())\r\n    }\r\n\r\n    return {\r\n      calldata: MulticallExtended.encodeMulticall(calldatas, options.deadlineOrPreviousBlockhash),\r\n      value: toHex(inputIsNative ? totalAmountIn.quotient : ZERO),\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Produces the on-chain method name to call and the hex encoded parameters to pass as arguments for a given trade.\r\n   * @param trades to produce call parameters for\r\n   * @param options options for the call parameters\r\n   */\r\n  public static swapAndAddCallParameters(\r\n    trades: AnyTradeType,\r\n    options: SwapAndAddOptions,\r\n    position: Position,\r\n    addLiquidityOptions: CondensedAddLiquidityOptions,\r\n    tokenInApprovalType: ApprovalTypes,\r\n    tokenOutApprovalType: ApprovalTypes\r\n  ): MethodParameters {\r\n    const {\r\n      calldatas,\r\n      inputIsNative,\r\n      outputIsNative,\r\n      sampleTrade,\r\n      totalAmountIn: totalAmountSwapped,\r\n      quoteAmountOut,\r\n      minimumAmountOut,\r\n    } = SwapRouter.encodeSwaps(trades, options, true)\r\n\r\n    // encode output token permit if necessary\r\n    if (options.outputTokenPermit) {\r\n      invariant(quoteAmountOut.currency.isToken, 'NON_TOKEN_PERMIT_OUTPUT')\r\n      calldatas.push(SelfPermit.encodePermit(quoteAmountOut.currency, options.outputTokenPermit))\r\n    }\r\n\r\n    const chainId = sampleTrade.route.chainId\r\n    const zeroForOne = position.pool.token0.wrapped.address === totalAmountSwapped.currency.wrapped.address\r\n    const { positionAmountIn, positionAmountOut } = SwapRouter.getPositionAmounts(position, zeroForOne)\r\n\r\n    // if tokens are native they will be converted to WETH9\r\n    const tokenIn = inputIsNative ? WETH9[chainId] : positionAmountIn.currency.wrapped\r\n    const tokenOut = outputIsNative ? WETH9[chainId] : positionAmountOut.currency.wrapped\r\n\r\n    // if swap output does not make up whole outputTokenBalanceDesired, pull in remaining tokens for adding liquidity\r\n    const amountOutRemaining = positionAmountOut.subtract(quoteAmountOut.wrapped)\r\n    if (amountOutRemaining.greaterThan(CurrencyAmount.fromRawAmount(positionAmountOut.currency, 0))) {\r\n      // if output is native, this means the remaining portion is included as native value in the transaction\r\n      // and must be wrapped. Otherwise, pull in remaining ERC20 token.\r\n      outputIsNative\r\n        ? calldatas.push(PaymentsExtended.encodeWrapETH(amountOutRemaining.quotient))\r\n        : calldatas.push(PaymentsExtended.encodePull(tokenOut, amountOutRemaining.quotient))\r\n    }\r\n\r\n    // if input is native, convert to WETH9, else pull ERC20 token\r\n    inputIsNative\r\n      ? calldatas.push(PaymentsExtended.encodeWrapETH(positionAmountIn.quotient))\r\n      : calldatas.push(PaymentsExtended.encodePull(tokenIn, positionAmountIn.quotient))\r\n\r\n    // approve token balances to NFTManager\r\n    if (tokenInApprovalType !== ApprovalTypes.NOT_REQUIRED)\r\n      calldatas.push(ApproveAndCall.encodeApprove(tokenIn, tokenInApprovalType))\r\n    if (tokenOutApprovalType !== ApprovalTypes.NOT_REQUIRED)\r\n      calldatas.push(ApproveAndCall.encodeApprove(tokenOut, tokenOutApprovalType))\r\n\r\n    // represents a position with token amounts resulting from a swap with maximum slippage\r\n    // hence the minimal amount out possible.\r\n    const minimalPosition = Position.fromAmounts({\r\n      pool: position.pool,\r\n      tickLower: position.tickLower,\r\n      tickUpper: position.tickUpper,\r\n      amount0: zeroForOne ? position.amount0.quotient.toString() : minimumAmountOut.quotient.toString(),\r\n      amount1: zeroForOne ? minimumAmountOut.quotient.toString() : position.amount1.quotient.toString(),\r\n      useFullPrecision: false,\r\n    })\r\n\r\n    // encode NFTManager add liquidity\r\n    calldatas.push(\r\n      ApproveAndCall.encodeAddLiquidity(position, minimalPosition, addLiquidityOptions, options.slippageTolerance)\r\n    )\r\n\r\n    // sweep remaining tokens\r\n    inputIsNative\r\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\r\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenIn, ZERO))\r\n    outputIsNative\r\n      ? calldatas.push(PaymentsExtended.encodeUnwrapWETH9(ZERO))\r\n      : calldatas.push(PaymentsExtended.encodeSweepToken(tokenOut, ZERO))\r\n\r\n    let value: JSBI\r\n    if (inputIsNative) {\r\n      value = totalAmountSwapped.wrapped.add(positionAmountIn.wrapped).quotient\r\n    } else if (outputIsNative) {\r\n      value = amountOutRemaining.quotient\r\n    } else {\r\n      value = ZERO\r\n    }\r\n\r\n    return {\r\n      calldata: MulticallExtended.encodeMulticall(calldatas, options.deadlineOrPreviousBlockhash),\r\n      value: value.toString(),\r\n    }\r\n  }\r\n\r\n  // if price impact is very high, there's a chance of hitting max/min prices resulting in a partial fill of the swap\r\n  private static riskOfPartialFill(trades: AnyTradeType): boolean {\r\n    if (Array.isArray(trades)) {\r\n      return trades.some((trade) => {\r\n        return SwapRouter.v3TradeWithHighPriceImpact(trade)\r\n      })\r\n    } else {\r\n      return SwapRouter.v3TradeWithHighPriceImpact(trades)\r\n    }\r\n  }\r\n\r\n  private static v3TradeWithHighPriceImpact(\r\n    trade: Trade<Currency, Currency, TradeType> | V3Trade<Currency, Currency, TradeType>\r\n  ): boolean {\r\n    return trade.priceImpact.greaterThan(REFUND_ETH_PRICE_IMPACT_THRESHOLD)\r\n  }\r\n\r\n  private static getPositionAmounts(\r\n    position: Position,\r\n    zeroForOne: boolean\r\n  ): {\r\n    positionAmountIn: CurrencyAmount<Currency>\r\n    positionAmountOut: CurrencyAmount<Currency>\r\n  } {\r\n    const { amount0, amount1 } = position.mintAmounts\r\n    const currencyAmount0 = CurrencyAmount.fromRawAmount(position.pool.token0, amount0)\r\n    const currencyAmount1 = CurrencyAmount.fromRawAmount(position.pool.token1, amount1)\r\n\r\n    const [positionAmountIn, positionAmountOut] = zeroForOne\r\n      ? [currencyAmount0, currencyAmount1]\r\n      : [currencyAmount1, currencyAmount0]\r\n    return { positionAmountIn, positionAmountOut }\r\n  }\r\n}\r\n","import { Token } from '@uniswap/sdk-core'\r\nimport { Pool } from '@uniswap/v3-sdk'\r\n\r\n/**\r\n * Simple utility function to get the output of an array of Pools or Pairs\r\n * @param pools\r\n * @param firstInputToken\r\n * @returns the output token of the last pool in the array\r\n */\r\nexport const getOutputOfPools = (pools: Pool[], firstInputToken: Token): Token => {\r\n  const { inputToken: outputToken } = pools.reduce(\r\n    ({ inputToken }, pool: Pool): { inputToken: Token } => {\r\n      if (!pool.involvesToken(inputToken)) throw new Error('PATH')\r\n      const outputToken: Token = pool.token0.equals(inputToken) ? pool.token1 : pool.token0\r\n      return {\r\n        inputToken: outputToken,\r\n      }\r\n    },\r\n    { inputToken: firstInputToken }\r\n  )\r\n  return outputToken\r\n}\r\n"],"names":["MSG_SENDER","ADDRESS_THIS","ZERO","JSBI","BigInt","ONE","V2_FEE_PATH_PLACEHOLDER","ApprovalTypes","isMint","options","Object","keys","some","k","ApproveAndCall","encodeApproveMax","token","INTERFACE","encodeFunctionData","address","encodeApproveMaxMinusOne","encodeApproveZeroThenMax","encodeApproveZeroThenMaxMinusOne","encodeCallPositionManager","calldatas","length","invariant","encodedMulticall","NonfungiblePositionManager","encodeAddLiquidity","position","minimalPosition","addLiquidityOptions","slippageTolerance","mintAmountsWithSlippage","amount0Min","amount0","amount1Min","amount1","lessThan","quotient","token0","pool","token1","fee","tickLower","tickUpper","toHex","recipient","tokenId","encodeApprove","approvalType","MAX","wrapped","MAX_MINUS_ONE","ZERO_THEN_MAX","ZERO_THEN_MAX_MINUS_ONE","Interface","abi","validateAndParseBytes32","bytes32","match","Error","toLowerCase","MulticallExtended","encodeMulticall","validation","Multicall","Array","isArray","startsWith","previousBlockhash","deadline","encodeFeeBips","multiply","PaymentsExtended","encodeUnwrapWETH9","amountMinimum","feeOptions","Payments","feeBips","feeRecipient","validateAndParseAddress","encodeSweepToken","encodePull","amount","encodeWrapETH","Protocol","RouteV3","v3Route","pools","input","output","V3","path","tokenPath","V3RouteSDK","Trade","v3Routes","tradeType","swaps","routes","routev3","inputAmount","outputAmount","route","push","inputCurrency","currency","outputCurrency","every","equals","numPools","map","reduce","total","cur","poolAddressSet","Set","Pool","add","getAddress","size","minimumAmountOut","amountOut","TradeType","EXACT_OUTPUT","slippageAdjustedAmountOut","Fraction","invert","CurrencyAmount","fromRawAmount","maximumAmountIn","amountIn","EXACT_INPUT","slippageAdjustedAmountIn","worstExecutionPrice","Price","fromRoutes","populatedV3Routes","V3TradeSDK","fromRoute","v3Trade","_inputAmount","totalInputFromRoutes","_outputAmount","totalOutputFromRoutes","_executionPrice","_priceImpact","spotOutputAmount","midPrice","quote","priceImpact","subtract","divide","Percent","numerator","denominator","REFUND_ETH_PRICE_IMPACT_THRESHOLD","SwapRouter","encodeV3Swap","trade","routerMustCustody","performAggregatedSlippageCheck","singleHop","exactInputSingleParams","tokenIn","tokenOut","amountOutMinimum","sqrtPriceLimitX96","exactOutputSingleParams","amountInMaximum","encodeRouteToPath","exactInputParams","exactOutputParams","encodeSwaps","trades","isSwapAndAdd","swap","protocol","individualTrades","V3Trade","createUncheckedTrade","numberOfTrades","sampleTrade","inputIsNative","isNative","outputIsNative","inputTokenPermit","isToken","SelfPermit","encodePermit","calldata","ZERO_IN","ZERO_OUT","sum","quoteAmountOut","totalAmountIn","swapCallParameters","riskOfPartialFill","encodeRefundETH","deadlineOrPreviousBlockhash","value","swapAndAddCallParameters","tokenInApprovalType","tokenOutApprovalType","totalAmountSwapped","outputTokenPermit","chainId","zeroForOne","getPositionAmounts","positionAmountIn","positionAmountOut","WETH9","amountOutRemaining","greaterThan","NOT_REQUIRED","Position","fromAmounts","toString","useFullPrecision","v3TradeWithHighPriceImpact","mintAmounts","currencyAmount0","currencyAmount1","getOutputOfPools","firstInputToken","inputToken","involvesToken","outputToken"],"mappings":"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"}